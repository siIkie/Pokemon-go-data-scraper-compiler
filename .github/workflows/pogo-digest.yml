name: POGO Events Digest (Smart Watch)

on:
  schedule:
    - cron: "0 */2 * * *"     # every 2 hours
  workflow_dispatch:           # allow manual run

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.watch.outputs.changed }}
      END: ${{ steps.dates.outputs.END }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute dates (today)
        id: dates
        run: echo "END=$(date -u +%F)" >> $GITHUB_OUTPUT

      - name: Fetch feeds and compute hashes
        id: watch
        run: |
          mkdir -p .state
          # Feeds/pages to watch
          NIANTIC_RSS="https://pokemongolive.com/news/?format=rss"
          LEEK_EVENTS="https://leekduck.com/events/"
          LEEK_CAL="https://leekduck.com/calendar/"

          curl -LfsS "$NIANTIC_RSS"  -o .state/niantic.xml  || true
          curl -LfsS "$LEEK_EVENTS"  -o .state/leek_events.html  || true
          curl -LfsS "$LEEK_CAL"     -o .state/leek_cal.html  || true

          # Combined hash of fetched content
          HASH=$(cat .state/niantic.xml .state/leek_events.html .state/leek_cal.html 2>/dev/null | sha256sum | cut -d' ' -f1)
          echo "current_hash=$HASH"

          # Previous hash
          PREV=""
          if [ -f .state/feeds.json ]; then
            PREV=$(grep -oE '"hash":"[^"]+"' .state/feeds.json | cut -d':' -f2 | tr -d '"')
          fi
          echo "previous_hash=$PREV"

          if [ "$HASH" != "$PREV" ] && [ -n "$HASH" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            printf '{ "hash":"%s", "updated":"%s" }\n' "$HASH" "$(date -u +%FT%TZ)" > .state/feeds.json
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Write update summaries (separate folder)
        if: steps.watch.outputs.changed == 'true'
        run: |
          set -e
          TODAY="${{ steps.dates.outputs.END }}"
          mkdir -p updates/"$TODAY" updates
          {
            echo "# Pokémon GO Digest Update"
            echo "Date (UTC): $TODAY"
            echo
            echo "Feeds updated → new posts or edits detected."
            echo
            echo "Sources checked:"
            echo "- Niantic News RSS"
            echo "- Leek Duck Events"
            echo "- Leek Duck Calendar"
          } > updates/"$TODAY"/summary.txt

          cp updates/"$TODAY"/summary.txt updates/latest.txt

      - name: Commit state + summaries (only on change)
        if: steps.watch.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .state/feeds.json updates/
          git commit -m "Update feed state + summary: ${{ steps.dates.outputs.END }}" || echo "No changes to commit"
          git push

  build:
    needs: check
    if: needs.check.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      END: ${{ steps.dates.outputs.END }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Compute date range (full history → today)
        id: dates
        run: |
          echo "START=2024-06-01" >> $GITHUB_OUTPUT
          echo "END=$(date -u +%F)" >> $GITHUB_OUTPUT

      - name: Restore pogo_library cache
        uses: actions/cache/restore@v4
        with:
          path: pogo_library
          key: pogolib-${{ steps.dates.outputs.END }}
          restore-keys: |
            pogolib-

      - name: Build library (FULL RANGE)
        run: |
          python build_pogo_library.py \
            --start "${{ steps.dates.outputs.START }}" \
            --end   "${{ steps.dates.outputs.END }}" \
            --out pogo_library

      - name: Save pogo_library cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: pogo_library
          key: pogolib-${{ steps.dates.outputs.END }}

      - name: Build digest + ICS
        run: |
          python digest_from_library.py \
            --lib pogo_library \
            --out POGO_Digest.xlsx \
            --ics POGO_Events.ics

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: POGO_Digest_${{ steps.dates.outputs.END }}
          path: |
            POGO_Digest.xlsx
            POGO_Events.ics
            pogo_library/niantic/index.json
            pogo_library/leekduck/index.json

      - name: Commit stable copies to repo (downloads live here)
        run: |
          mkdir -p outputs/latest
          cp POGO_Digest.xlsx outputs/latest/POGO_Digest.xlsx
          cp POGO_Events.ics outputs/latest/POGO_Events.ics
          {
            echo "# Latest POGO Digest"
            echo "- Built on: ${{ steps.dates.outputs.END }}"
            echo "- Range: ${{ steps.dates.outputs.START }} → ${{ steps.dates.outputs.END }}"
            echo "- Files: POGO_Digest.xlsx, POGO_Events.ics"
          } > outputs/latest/README.md
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add outputs/latest/ pogo_library/niantic/index.json pogo_library/leekduck/index.json
          git commit -m "Update latest digest: ${{ steps.dates.outputs.START }} → ${{ steps.dates.outputs.END }}" || echo "No changes to commit"
          git push

  release:
    needs: build
    # Releases only when feeds changed OR manual run (so automated runs don’t spam releases unless there’s new info)
    if: needs.check.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact from build
        uses: actions/download-artifact@v4
        with:
          name: POGO_Digest_${{ needs.build.outputs.END }}
          path: dist

      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: pogo-digest-${{ needs.build.outputs.END }}
          name: "POGO Digest ${{ needs.build.outputs.END }}"
          body: "Automated digest after feed change or manual trigger."
          files: |
            dist/POGO_Digest.xlsx
            dist/POGO_Events.ics